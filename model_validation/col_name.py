def get_col_name():
    col_name = [
        "timestamp",
        "packet_type",
        "link_layer_address_type",
        "link_layer_address_length",
        "src_mac",
        "dst_mac",
        "src_ip",
        "src_port",
        "dst_ip",
        "dst_port",
        "Ethernet_proto",
        "layer_2_proto",
        "layer_3_proto",
        "layer_1_payload_size",
        "layer_2_payload_size",
        "layer_3_payload_size",
        "arp_op",
        "arp_sha",
        "arp_spa",
        "arp_tha",
        "arp_tpa",
        "cdp_cksum",
        "cdp_data_size",
        "cdp_ttl",
        "cdp_version",
        "dtp_data_size",
        "dtp_type",
        "dtp_version",
        "eth_size",
        "icmp_code",
        "icmp_type",
        "igmp_type",
        "ip_off",
        "ip_id",
        "ip_options",
        "ip_proto",
        "ip_ttl",
        "tcp_ack",
        "tcp_flags",
        "tcp_options",
        "tcp_seq",
        "tcp_window",
        "core_payload_mean",
        "core_payload_std",
        "core_payload_max",
        "core_payload_min",
        "core_payload_entropy",
        "core_payload_len",
    ]
    return col_name
    
def get_default_dict(key_list=None):
    default_dict = {}
    if key_list == None:
        key_list = get_col_name()
    for key_t in key_list:
        default_dict[key_t] = None
        
    return default_dict


def get_default_dict_characteristics_1_category(key_list=None):
    base_col = get_col_name_base_1009()
    features_col = get_col_name_characteristics_1category()
    
    if key_list == None:
        features_col2 = []
        features_col1 = []
        for key_t in features_col:
            features_col2 = features_col2 + [key_t + "_c1_2"]
            features_col1 = features_col1 + [key_t + "_c1_1"]
        key_list = base_col + features_col1 + features_col2
    
    default_dict = get_default_dict(key_list=key_list)
    default_dict["id_list"] = None
    return default_dict
    
    
def merge_dict(dict1:dict, dict2:dict):
    dict_out = {}
    for key_t in dict1:
        dict_out[key_t] = dict1[key_t]
    for key_t in dict2:
        dict_out[key_t] = dict2[key_t]
    return dict_out

def update_dict(input_dict:dict, sub_dict:dict, key_list=None):
    
    if key_list == None:
        key_list = list(input_dict.keys())
        
    for key_t in key_list:
        if key_t in sub_dict \
            and sub_dict[key_t] != None \
            and key_t in input_dict:
            input_dict[key_t] = sub_dict[key_t]
    
    return input_dict

def updata_dict_col(input_dict:dict, key_str:str):
    key_list = list(input_dict.keys())
    new_dict = {}
    
    for key_t in key_list:
        new_key =  key_t + key_str
        new_dict[new_key] = input_dict[key_t]
            
    return new_dict


def get_col_name_1008():
    col_name = [
        "srcip",
        "sport",
        "dstip",
        "dsport",
        "proto",
        "state",
        "dur",
        "sbytes",
        "dbytes",
        "sttl",
        "dttl",
        "sloss",
        "dloss",
        "service",
        "Sload",
        "Dload",
        "Spkts",
        "Dpkts",
        "swin",
        "dwin",
        "stcpb",
        "dtcpb",
        "smeansz",
        "dmeansz",
        "trans_depth",
        "res_bdy_len",
        "Sjit",
        "Djit",
        "Stime",
        "Ltime",
        "Sintpkt",
        "Dintpkt",
        "tcprtt",
        "synack",
        "ackdat",
        "is_sm_ips_ports",
        "ct_state_ttl",
        "ct_flw_http_mthd",
        "is_ftp_login",
        "ct_ftp_cmd",
        "ct_srv_src",
        "ct_srv_dst",
        "ct_dst_ltm",
        "ct_src_ltm",
        "ct_src_dport_ltm",
        "ct_dst_sport_ltm",
        "ct_dst_src_ltm",
        "attack_cat",
        "Label",
    ]
    return col_name


def get_col_name_base_1009():
    col_name = [
        "srcip",
        "dstip",
        "proto",
        "sport",
        "dsport",
        "Ethernet_proto",
        "ip_proto",
        "count",
        "start_time",
        "end_time",
    ]
    return col_name


def get_col_name_characteristics_1category():
    col_name = [
        "count",
        "tcp_flags",
        "layer_1_payload_size_mean",
        "layer_1_payload_size_std",
        "layer_1_payload_size_max",
        "layer_1_payload_size_min",
        "layer_1_payload_size_entropy",
        "layer_2_payload_size_mean",
        "layer_2_payload_size_std",
        "layer_2_payload_size_max",
        "layer_2_payload_size_min",
        "layer_2_payload_size_entropy",
        "layer_3_payload_size_mean",
        "layer_3_payload_size_std",
        "layer_3_payload_size_max",
        "layer_3_payload_size_min",
        "layer_3_payload_size_entropy",
        "arp_op_mean",
        "arp_op_std",
        "arp_op_max",
        "arp_op_min",
        "arp_op_entropy",
        "icmp_code_mean",
        "icmp_code_std",
        "icmp_code_max",
        "icmp_code_min",
        "icmp_code_entropy",
        "icmp_type_mean",
        "icmp_type_std",
        "icmp_type_max",
        "icmp_type_min",
        "icmp_type_entropy",
        "igmp_type_mean",
        "igmp_type_std",
        "igmp_type_max",
        "igmp_type_min",
        "igmp_type_entropy",
        "ip_off_mean",
        "ip_off_std",
        "ip_off_max",
        "ip_off_min",
        "ip_off_entropy",
        "ip_ttl_mean",
        "ip_ttl_std",
        "ip_ttl_max",
        "ip_ttl_min",
        "ip_ttl_entropy",
        "tcp_ack_mean",
        "tcp_ack_std",
        "tcp_ack_max",
        "tcp_ack_min",
        "tcp_ack_entropy",
        "tcp_flags_mean",
        "tcp_flags_std",
        "tcp_flags_max",
        "tcp_flags_min",
        "tcp_flags_entropy",
        "tcp_seq_mean",
        "tcp_seq_std",
        "tcp_seq_max",
        "tcp_seq_min",
        "tcp_seq_entropy",
        "tcp_window_mean",
        "tcp_window_std",
        "tcp_window_max",
        "tcp_window_min",
        "tcp_window_entropy",
        "core_payload_bytes_mean",
        "core_payload_bytes_std",
        "core_payload_bytes_max",
        "core_payload_bytes_min",
        "core_payload_bytes_entropy",
        "core_payload_mean_mean",
        "core_payload_mean_std",
        "core_payload_mean_max",
        "core_payload_mean_min",
        "core_payload_mean_entropy",
        "core_payload_std_mean",
        "core_payload_std_std",
        "core_payload_std_max",
        "core_payload_std_min",
        "core_payload_std_entropy",
        "core_payload_max_mean",
        "core_payload_max_std",
        "core_payload_max_max",
        "core_payload_max_min",
        "core_payload_max_entropy",
        "core_payload_min_mean",
        "core_payload_min_std",
        "core_payload_min_max",
        "core_payload_min_min",
        "core_payload_min_entropy",
        "core_payload_entropy_mean",
        "core_payload_entropy_std",
        "core_payload_entropy_max",
        "core_payload_entropy_min",
        "core_payload_entropy_entropy",
    ]
    return col_name


def get_col_windows_features():
    col_list = [
        "src_ip_prob_str",
        "src_ip_ent",
        "dst_ip_prob_str",
        "dst_ip_ent",
        "src_port_prob_str",
        "src_port_ent",
        "src_port_mean",
        "src_port_std",
        "src_port_proportion_0",
        "src_port_proportion_10000",
        "dst_port_prob_str",
        "dst_port_ent",
        "dst_port_mean",
        "dst_port_std",
        "dst_port_proportion_0",
        "dst_port_proportion_10000",
        "ip_proto_prob_str",
        "ip_proto_ent",
        "ip_proto_mean",
        "ip_proto_std",
        "ip_proto_proportion_not_tcp_udp",
        "eth_proto_prob_str",
        "eth_proto_ent",
        "eth_proto_mean",
        "eth_proto_std",
        "eth_proto_proportion_not_ip_arp",
        "eth_proto_proportion_ip",
        "eth_proto_proportion_arp",
        "ip_ttl_prob_str",
        "ip_ttl_ent",
        "ip_ttl_mean",
        "ip_ttl_std",
        "ip_ttl_proportion_0",
        "ip_ttl_proportion_100",
        "tcp_window_prob_str",
        "tcp_window_ent",
        "tcp_window_mean",
        "tcp_window_std",
        "tcp_window_proportion_0",
        "tcp_window_proportion_100",
        "tcp_flags_prob_str",
        "tcp_flags_ent",
        "tcp_flags_mean",
        "tcp_flags_std",
        "tcp_flags_proportion_0",
        "tcp_flags_proportion_100",
        "eth_size_prob_str",
        "eth_size_ent",
        "eth_size_mean",
        "eth_size_std",
        "eth_size_proportion_0",
        "eth_size_proportion_100",
        "core_payload_mean_prob_str",
        "core_payload_mean_ent",
        "core_payload_mean_mean",
        "core_payload_mean_std",
        "core_payload_mean_proportion_0",
        "core_payload_mean_proportion_100",
        "core_payload_std_prob_str",
        "core_payload_std_ent",
        "core_payload_std_mean",
        "core_payload_std_std",
        "core_payload_std_proportion_0",
        "core_payload_std_proportion_100",
        "core_payload_max_prob_str",
        "core_payload_max_ent",
        "core_payload_max_mean",
        "core_payload_max_std",
        "core_payload_max_proportion_0",
        "core_payload_max_proportion_100",
        "core_payload_min_prob_str",
        "core_payload_min_ent",
        "core_payload_min_mean",
        "core_payload_min_std",
        "core_payload_min_proportion_0",
        "core_payload_min_proportion_100",
        "core_payload_entropy_prob_str",
        "core_payload_entropy_ent",
        "core_payload_entropy_mean",
        "core_payload_entropy_std",
        "core_payload_entropy_proportion_0",
        "core_payload_entropy_proportion_100",
        "core_payload_len_prob_str",
        "core_payload_len_ent",
        "core_payload_len_mean",
        "core_payload_len_std",
        "core_payload_len_proportion_0",
        "core_payload_len_proportion_100",
    ]
    return col_list


def get_col_windows_features_for_distance():
    col_list = [
        "ip_proto_mean",
        "eth_proto_mean",
        "ip_ttl_mean",
        "tcp_window_mean",
        "tcp_flags_mean",
        "eth_size_mean",
        "core_payload_mean_mean",
        "core_payload_std_mean",
        "core_payload_max_mean",
        "core_payload_min_mean",
        "core_payload_entropy_mean",
        "core_payload_len_mean",
    ]
    return col_list


def get_col_windows_features_for_probability():
    col_list = [
        "ip_ttl",
        "tcp_window",
        "eth_size",
        "core_payload_mean",
        "core_payload_std",
        "core_payload_entropy",
        "core_payload_len",
    ]
    return col_list


def get_col_windows_features_for_probability2():
    col_list = [
        "src_port",
        "dst_port",
        "ip_proto",
        "eth_proto",
    ]
    return col_list


def get_col_windows_features_for_append():
    col_list = [
        "src_ip_ent",
        "dst_ip_ent",
        "src_port_ent",
        "dst_port_ent",
        "ip_proto_ent",
        "eth_proto_ent",
        "ip_ttl_ent",
        "tcp_window_ent",
        "tcp_flags_ent",
        "eth_size_ent",
        "core_payload_mean_ent",
    ]
    return col_list



def get_col_name_Type_II_characteristics():
    col_list = [
        # 欠缺后续补全
    ]
    return col_list


def get_default_dict_characteristics_2_category(key_list=None):
    key_list = None    
    if key_list == None:
        key_list = get_col_name_Type_II_characteristics() 
    default_dict = get_default_dict(key_list=key_list)
    return default_dict


def get_merge_1c_col_name():
    col_name = \
        ["dur",
        "proto",
        "service",
        "state",
        "spkts",
        "dpkts",
        "sbytes",
        "dbytes",
        "rate",
        "sttl",
        "dttl",
        "sload",
        "dload",
        "sloss",
        "dloss",
        "sinpkt",
        "dinpkt",
        "sjit",
        "djit",
        "swin",
        "stcpb",
        "dtcpb",
        "dwin",
        "tcprtt",
        "synack",
        "ackdat",
        "smean",
        "dmean",
        "trans_depth",
        "response_body_len",
        "ct_srv_src",
        "ct_state_ttl",
        "ct_dst_ltm",
        "ct_src_dport_ltm",
        "ct_dst_sport_ltm",
        "ct_dst_src_ltm",
        "is_ftp_login",
        "ct_ftp_cmd",
        "ct_flw_http_mthd",
        "ct_src_ltm",
        "ct_srv_dst",
        "is_sm_ips_ports",
        "attack_cat",
        "label",
        "proto_c1",
        "state_c1",
        "dur_c1",
        "sbytes_c1",
        "dbytes_c1",
        "sttl_c1",
        "dttl_c1",
        "sloss_c1",
        "dloss_c1",
        "service_c1",
        "Sload_c1",
        "Dload_c1",
        "Spkts_c1",
        "Dpkts_c1",
        "swin_c1",
        "dwin_c1",
        "stcpb_c1",
        "dtcpb_c1",
        "smeansz_c1",
        "dmeansz_c1",
        "trans_depth_c1",
        "res_bdy_len_c1",
        "Sjit_c1",
        "Djit_c1",
        "Sintpkt_c1",
        "Dintpkt_c1",
        "tcprtt_c1",
        "synack_c1",
        "ackdat_c1",
        "is_sm_ips_ports_c1",
        "ct_state_ttl_c1",
        "ct_flw_http_mthd_c1",
        "is_ftp_login_c1",
        "ct_ftp_cmd_c1",
        "ct_srv_src_c1",
        "ct_srv_dst_c1",
        "ct_dst_ltm_c1",
        "ct_src_ltm_c1",
        "ct_src_dport_ltm_c1",
        "ct_dst_sport_ltm_c1",
        "ct_dst_src_ltm_c1",
        "attack_cat_c1",
        "Label_c1",
        ]
    return col_name


def get_merge_1c_col_name_map():
    map_list = [
                    ["dur","dur_c1"],
                    ["proto","proto_c1"],
                    ["service","service_c1"],
                    ["state","state_c1"],
                    ["spkts","Spkts_c1"],
                    ["dpkts","Dpkts_c1"],
                    ["sbytes","sbytes_c1"],
                    ["dbytes","dbytes_c1"],
                    ["sttl","sttl_c1"],
                    ["dttl","dttl_c1"],
                    ["sload","Sload_c1"],
                    ["dload","Dload_c1"],
                    ["sloss","sloss_c1"],
                    ["dloss","dloss_c1"],
                    ["sinpkt","Sintpkt_c1"],
                    ["dinpkt","Dintpkt_c1"],
                    ["sjit","Sjit_c1"],
                    ["djit","Djit_c1"],
                    ["swin","swin_c1"],
                    ["stcpb","stcpb_c1"],
                    ["dtcpb","dtcpb_c1"],
                    ["dwin","dwin_c1"],
                    ["tcprtt","tcprtt_c1"],
                    ["synack","synack_c1"],
                    ["ackdat","ackdat_c1"],
                    ["smean","smeansz_c1"],
                    ["dmean","dmeansz_c1"],
                    ["trans_depth","trans_depth_c1"],
                    ["response_body_len","res_bdy_len_c1"],
                    ["ct_srv_src","ct_srv_src_c1"],
                    ["ct_state_ttl","ct_state_ttl_c1"],
                    ["ct_dst_ltm","ct_dst_ltm_c1"],
                    ["ct_src_dport_ltm","ct_src_dport_ltm_c1"],
                    ["ct_dst_sport_ltm","ct_dst_sport_ltm_c1"],
                    ["ct_dst_src_ltm","ct_dst_src_ltm_c1"],
                    ["is_ftp_login","is_ftp_login_c1"],
                    ["ct_ftp_cmd","ct_ftp_cmd_c1"],
                    ["ct_flw_http_mthd","ct_flw_http_mthd_c1"],
                    ["ct_src_ltm","ct_src_ltm_c1"],
                    ["ct_srv_dst","ct_srv_dst_c1"],
                    ["is_sm_ips_ports","is_sm_ips_ports_c1"],
                    ["attack_cat","attack_cat_c1"],
                    ["label","Label_c1"],
                ]
    
    return map_list

def get_col_name_1022():
    col_name = [
                "dur",
                "proto",
                "service",
                "state",
                "spkts",
                "dpkts",
                "sbytes",
                "dbytes",
                "rate",
                "sttl",
                "dttl",
                "sload",
                "dload",
                "sloss",
                "dloss",
                "sinpkt",
                "dinpkt",
                "sjit",
                "djit",
                "swin",
                "stcpb",
                "dtcpb",
                "dwin",
                "tcprtt",
                "synack",
                "ackdat",
                "smean",
                "dmean",
                "trans_depth",
                "response_body_len",
                "ct_srv_src",
                "ct_state_ttl",
                "ct_dst_ltm",
                "ct_src_dport_ltm",
                "ct_dst_sport_ltm",
                "ct_dst_src_ltm",
                "is_ftp_login",
                "ct_ftp_cmd",
                "ct_flw_http_mthd",
                "ct_src_ltm",
                "ct_srv_dst",
                "is_sm_ips_ports",
                "attack_cat",
                "label",
                "srcip_c1",
                "sport_c1",
                "dstip_c1",
                "dsport_c1",
                "proto_c1",
                "state_c1",
                "dur_c1",
                "sbytes_c1",
                "dbytes_c1",
                "sttl_c1",
                "dttl_c1",
                "sloss_c1",
                "dloss_c1",
                "service_c1",
                "Sload_c1",
                "Dload_c1",
                "Spkts_c1",
                "Dpkts_c1",
                "swin_c1",
                "dwin_c1",
                "stcpb_c1",
                "dtcpb_c1",
                "smeansz_c1",
                "dmeansz_c1",
                "trans_depth_c1",
                "res_bdy_len_c1",
                "Sjit_c1",
                "Djit_c1",
                "Stime_c1",
                "Ltime_c1",
                "Sintpkt_c1",
                "Dintpkt_c1",
                "tcprtt_c1",
                "synack_c1",
                "ackdat_c1",
                "is_sm_ips_ports_c1",
                "ct_state_ttl_c1",
                "ct_flw_http_mthd_c1",
                "is_ftp_login_c1",
                "ct_ftp_cmd_c1",
                "ct_srv_src_c1",
                "ct_srv_dst_c1",
                "ct_dst_ltm_c1",
                "ct_src_ltm_c1",
                "ct_src_dport_ltm_c1",
                "ct_dst_sport_ltm_c1",
                "ct_dst_src_ltm_c1",
                "attack_cat_c1",
                "Label_c1",
                
                "count_c2_1",
                "start_time_c2_1",
                "end_time_c2_1",
                "tcp_flags_c2_1",
                "layer_1_payload_size_mean_c2_1",
                "layer_1_payload_size_std_c2_1",
                "layer_1_payload_size_max_c2_1",
                "layer_1_payload_size_min_c2_1",
                "layer_1_payload_size_entropy_c2_1",
                "layer_2_payload_size_mean_c2_1",
                "layer_2_payload_size_std_c2_1",
                "layer_2_payload_size_max_c2_1",
                "layer_2_payload_size_min_c2_1",
                "layer_2_payload_size_entropy_c2_1",
                "layer_3_payload_size_mean_c2_1",
                "layer_3_payload_size_std_c2_1",
                "layer_3_payload_size_max_c2_1",
                "layer_3_payload_size_min_c2_1",
                "layer_3_payload_size_entropy_c2_1",
                "arp_op_mean_c2_1",
                "arp_op_std_c2_1",
                "arp_op_max_c2_1",
                "arp_op_min_c2_1",
                "arp_op_entropy_c2_1",
                "icmp_code_mean_c2_1",
                "icmp_code_std_c2_1",
                "icmp_code_max_c2_1",
                "icmp_code_min_c2_1",
                "icmp_code_entropy_c2_1",
                "icmp_type_mean_c2_1",
                "icmp_type_std_c2_1",
                "icmp_type_max_c2_1",
                "icmp_type_min_c2_1",
                "icmp_type_entropy_c2_1",
                "igmp_type_mean_c2_1",
                "igmp_type_std_c2_1",
                "igmp_type_max_c2_1",
                "igmp_type_min_c2_1",
                "igmp_type_entropy_c2_1",
                "ip_off_mean_c2_1",
                "ip_off_std_c2_1",
                "ip_off_max_c2_1",
                "ip_off_min_c2_1",
                "ip_off_entropy_c2_1",
                "ip_ttl_mean_c2_1",
                "ip_ttl_std_c2_1",
                "ip_ttl_max_c2_1",
                "ip_ttl_min_c2_1",
                "ip_ttl_entropy_c2_1",
                "tcp_ack_mean_c2_1",
                "tcp_ack_std_c2_1",
                "tcp_ack_max_c2_1",
                "tcp_ack_min_c2_1",
                "tcp_ack_entropy_c2_1",
                "tcp_flags_mean_c2_1",
                "tcp_flags_std_c2_1",
                "tcp_flags_max_c2_1",
                "tcp_flags_min_c2_1",
                "tcp_flags_entropy_c2_1",
                "tcp_seq_mean_c2_1",
                "tcp_seq_std_c2_1",
                "tcp_seq_max_c2_1",
                "tcp_seq_min_c2_1",
                "tcp_seq_entropy_c2_1",
                "tcp_window_mean_c2_1",
                "tcp_window_std_c2_1",
                "tcp_window_max_c2_1",
                "tcp_window_min_c2_1",
                "tcp_window_entropy_c2_1",
                "core_payload_bytes_mean_c2_1",
                "core_payload_bytes_std_c2_1",
                "core_payload_bytes_max_c2_1",
                "core_payload_bytes_min_c2_1",
                "core_payload_bytes_entropy_c2_1",
                "core_payload_mean_mean_c2_1",
                "core_payload_mean_std_c2_1",
                "core_payload_mean_max_c2_1",
                "core_payload_mean_min_c2_1",
                "core_payload_mean_entropy_c2_1",
                "core_payload_std_mean_c2_1",
                "core_payload_std_std_c2_1",
                "core_payload_std_max_c2_1",
                "core_payload_std_min_c2_1",
                "core_payload_std_entropy_c2_1",
                "core_payload_max_mean_c2_1",
                "core_payload_max_std_c2_1",
                "core_payload_max_max_c2_1",
                "core_payload_max_min_c2_1",
                "core_payload_max_entropy_c2_1",
                "core_payload_min_mean_c2_1",
                "core_payload_min_std_c2_1",
                "core_payload_min_max_c2_1",
                "core_payload_min_min_c2_1",
                "core_payload_min_entropy_c2_1",
                "core_payload_entropy_mean_c2_1",
                "core_payload_entropy_std_c2_1",
                "core_payload_entropy_max_c2_1",
                "core_payload_entropy_min_c2_1",
                "core_payload_entropy_entropy_c2_1",

                "count_c2_2",
                "start_time_c2_2",
                "end_time_c2_2",
                "tcp_flags_c2_2",
                "layer_1_payload_size_mean_c2_2",
                "layer_1_payload_size_std_c2_2",
                "layer_1_payload_size_max_c2_2",
                "layer_1_payload_size_min_c2_2",
                "layer_1_payload_size_entropy_c2_2",
                "layer_2_payload_size_mean_c2_2",
                "layer_2_payload_size_std_c2_2",
                "layer_2_payload_size_max_c2_2",
                "layer_2_payload_size_min_c2_2",
                "layer_2_payload_size_entropy_c2_2",
                "layer_3_payload_size_mean_c2_2",
                "layer_3_payload_size_std_c2_2",
                "layer_3_payload_size_max_c2_2",
                "layer_3_payload_size_min_c2_2",
                "layer_3_payload_size_entropy_c2_2",
                "arp_op_mean_c2_2",
                "arp_op_std_c2_2",
                "arp_op_max_c2_2",
                "arp_op_min_c2_2",
                "arp_op_entropy_c2_2",
                "icmp_code_mean_c2_2",
                "icmp_code_std_c2_2",
                "icmp_code_max_c2_2",
                "icmp_code_min_c2_2",
                "icmp_code_entropy_c2_2",
                "icmp_type_mean_c2_2",
                "icmp_type_std_c2_2",
                "icmp_type_max_c2_2",
                "icmp_type_min_c2_2",
                "icmp_type_entropy_c2_2",
                "igmp_type_mean_c2_2",
                "igmp_type_std_c2_2",
                "igmp_type_max_c2_2",
                "igmp_type_min_c2_2",
                "igmp_type_entropy_c2_2",
                "ip_off_mean_c2_2",
                "ip_off_std_c2_2",
                "ip_off_max_c2_2",
                "ip_off_min_c2_2",
                "ip_off_entropy_c2_2",
                "ip_ttl_mean_c2_2",
                "ip_ttl_std_c2_2",
                "ip_ttl_max_c2_2",
                "ip_ttl_min_c2_2",
                "ip_ttl_entropy_c2_2",
                "tcp_ack_mean_c2_2",
                "tcp_ack_std_c2_2",
                "tcp_ack_max_c2_2",
                "tcp_ack_min_c2_2",
                "tcp_ack_entropy_c2_2",
                "tcp_flags_mean_c2_2",
                "tcp_flags_std_c2_2",
                "tcp_flags_max_c2_2",
                "tcp_flags_min_c2_2",
                "tcp_flags_entropy_c2_2",
                "tcp_seq_mean_c2_2",
                "tcp_seq_std_c2_2",
                "tcp_seq_max_c2_2",
                "tcp_seq_min_c2_2",
                "tcp_seq_entropy_c2_2",
                "tcp_window_mean_c2_2",
                "tcp_window_std_c2_2",
                "tcp_window_max_c2_2",
                "tcp_window_min_c2_2",
                "tcp_window_entropy_c2_2",
                "core_payload_bytes_mean_c2_2",
                "core_payload_bytes_std_c2_2",
                "core_payload_bytes_max_c2_2",
                "core_payload_bytes_min_c2_2",
                "core_payload_bytes_entropy_c2_2",
                "core_payload_mean_mean_c2_2",
                "core_payload_mean_std_c2_2",
                "core_payload_mean_max_c2_2",
                "core_payload_mean_min_c2_2",
                "core_payload_mean_entropy_c2_2",
                "core_payload_std_mean_c2_2",
                "core_payload_std_std_c2_2",
                "core_payload_std_max_c2_2",
                "core_payload_std_min_c2_2",
                "core_payload_std_entropy_c2_2",
                "core_payload_max_mean_c2_2",
                "core_payload_max_std_c2_2",
                "core_payload_max_max_c2_2",
                "core_payload_max_min_c2_2",
                "core_payload_max_entropy_c2_2",
                "core_payload_min_mean_c2_2",
                "core_payload_min_std_c2_2",
                "core_payload_min_max_c2_2",
                "core_payload_min_min_c2_2",
                "core_payload_min_entropy_c2_2",
                "core_payload_entropy_mean_c2_2",
                "core_payload_entropy_std_c2_2",
                "core_payload_entropy_max_c2_2",
                "core_payload_entropy_min_c2_2",
                "core_payload_entropy_entropy_c2_2",
                ]
    return col_name


def get_col_name_1024():
    col_name = [
        "timestamp",
        "packet_type",
        "link_layer_address_type",
        "link_layer_address_length",
        "Ethernet_proto",
        "src_mac",
        "dst_mac",
        "src_ip",
        "src_port",
        "dst_ip",
        "dst_port",
        "ip_proto",
        "layer_2_proto",
        "layer_3_proto",
        "layer_1_payload_size",
        "layer_2_payload_size",
        "layer_3_payload_size",
        "core_payload_bytes",
    ]
    return col_name




def get_merge_1c_col_name_map_1025():
    map_list = [
                    ["dur","dur"],
                    ["proto","proto"],
                    ["service","service"],
                    ["state","state"],
                    ["spkts","Spkts"],
                    ["dpkts","Dpkts"],
                    ["sbytes","sbytes"],
                    ["dbytes","dbytes"],
                    ["sttl","sttl"],
                    ["dttl","dttl"],
                    ["sload","Sload"],
                    ["dload","Dload"],
                    ["sloss","sloss"],
                    ["dloss","dloss"],
                    ["sinpkt","Sintpkt"],
                    ["dinpkt","Dintpkt"],
                    ["sjit","Sjit"],
                    ["djit","Djit"],
                    ["swin","swin"],
                    ["stcpb","stcpb"],
                    ["dtcpb","dtcpb"],
                    ["dwin","dwin"],
                    ["tcprtt","tcprtt"],
                    ["synack","synack"],
                    ["ackdat","ackdat"],
                    ["smean","smeansz"],
                    ["dmean","dmeansz"],
                    ["trans_depth","trans_depth"],
                    ["response_body_len","res_bdy_len"],
                    ["ct_srv_src","ct_srv_src"],
                    ["ct_state_ttl","ct_state_ttl"],
                    ["ct_dst_ltm","ct_dst_ltm"],
                    ["ct_src_dport_ltm","ct_src_dport_ltm"],
                    ["ct_dst_sport_ltm","ct_dst_sport_ltm"],
                    ["ct_dst_src_ltm","ct_dst_src_ltm"],
                    ["is_ftp_login","is_ftp_login"],
                    ["ct_ftp_cmd","ct_ftp_cmd"],
                    ["ct_flw_http_mthd","ct_flw_http_mthd"],
                    ["ct_src_ltm","ct_src_ltm"],
                    ["ct_srv_dst","ct_srv_dst"],
                    ["is_sm_ips_ports","is_sm_ips_ports"],
                    ["attack_cat","attack_cat"],
                    ["label","Label"],
                ]
    
    return map_list